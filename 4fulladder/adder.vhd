-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 9.1 (Build Build 222 10/21/2009)
-- Created on Tue May 09 15:49:49 2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


--  Entity Declaration

ENTITY adder IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		a : IN STD_LOGIC;
		b : IN STD_LOGIC;
		ci : IN STD_LOGIC;
		co : OUT STD_LOGIC;
		s : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END adder;


--  Architecture Body

ARCHITECTURE adder_architecture OF adder IS
BEGIN
process(a,b,ci)
	VARIABLE input:std_logic_vector(2 DOWNTO 0);
	VARIABLE output:std_logic_vector(1 DOWNTO 0);
	
	BEGIN
	input := a&b&ci;
	case input is
		when "000" => output := "00";
		when "001" => output := "10";
		when "010" => output := "10";
		when "011" => output := "01";
		when "100" => output := "10";
		when "101" => output := "01";
		when "110" => output := "01";
		when "111" => output := "11";
	end case;
	s <= output(1); 
	co <= output(0); 
end process;
	---s<=a xor b xor ci;			--¹¦ÄÜÃèÊö
	---co<=(a and b) or (b and ci) or (ci and a);
	
END adder_architecture;
