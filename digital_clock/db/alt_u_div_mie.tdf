--alt_u_div DEVICE_FAMILY="MAX II" LPM_PIPELINE=0 MAXIMIZE_SPEED=9 SKIP_BITS=0 WIDTH_D=5 WIDTH_N=7 WIDTH_Q=7 WIDTH_R=5 denominator numerator quotient remainder
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_abs 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_lpm_divide 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ cbx_util_mgl 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_e7c (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_f7c (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);
FUNCTION add_sub_g7c (dataa[2..0], datab[2..0])
RETURNS ( cout, result[2..0]);
FUNCTION add_sub_h7c (dataa[3..0], datab[3..0])
RETURNS ( cout, result[3..0]);
FUNCTION add_sub_i7c (dataa[4..0], datab[4..0])
RETURNS ( cout, result[4..0]);
FUNCTION add_sub_j7c (dataa[5..0], datab[5..0])
RETURNS ( cout, result[5..0]);

--synthesis_resources = 
SUBDESIGN alt_u_div_mie
( 
	denominator[4..0]	:	input;
	numerator[6..0]	:	input;
	quotient[6..0]	:	output;
	remainder[4..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_e7c;
	add_sub_1 : add_sub_f7c;
	add_sub_2 : add_sub_g7c;
	add_sub_3 : add_sub_h7c;
	add_sub_4 : add_sub_i7c;
	add_sub_5 : add_sub_j7c;
	add_sub_6 : add_sub_j7c;
	DenominatorIn[47..0]	: WIRE;
	DenominatorIn_tmp[47..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[55..0]	: WIRE;
	NumeratorIn[55..0]	: WIRE;
	NumeratorIn_tmp[55..0]	: WIRE;
	prestg[41..0]	: WIRE;
	quotient_tmp[6..0]	: WIRE;
	sel[39..0]	: WIRE;
	selnose[55..0]	: WIRE;
	StageIn[47..0]	: WIRE;
	StageIn_tmp[47..0]	: WIRE;
	StageOut[41..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[6..6];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[6..6], NumeratorIn[12..12]);
	add_sub_1.datab[1..0] = DenominatorIn[7..6];
	add_sub_2.dataa[] = ( StageIn[13..12], NumeratorIn[18..18]);
	add_sub_2.datab[2..0] = DenominatorIn[14..12];
	add_sub_3.dataa[] = ( StageIn[20..18], NumeratorIn[24..24]);
	add_sub_3.datab[3..0] = DenominatorIn[21..18];
	add_sub_4.dataa[] = ( StageIn[27..24], NumeratorIn[30..30]);
	add_sub_4.datab[4..0] = DenominatorIn[28..24];
	add_sub_5.dataa[] = ( StageIn[34..30], NumeratorIn[36..36]);
	add_sub_5.datab[5..0] = DenominatorIn[35..30];
	add_sub_6.dataa[] = ( StageIn[40..36], NumeratorIn[42..42]);
	add_sub_6.datab[5..0] = DenominatorIn[41..36];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[41..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"0000000", add_sub_6.cout, B"0000000", add_sub_5.cout, B"0000000", add_sub_4.cout, B"0000000", add_sub_3.cout, B"0000000", add_sub_2.cout, B"0000000", add_sub_1.cout, B"0000000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[48..0], numerator[]);
	prestg[] = ( add_sub_6.result[], add_sub_5.result[], GND, add_sub_4.result[], B"00", add_sub_3.result[], B"000", add_sub_2.result[], B"0000", add_sub_1.result[], B"00000", add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[8..8]), (! selnose[16..16]), (! selnose[24..24]), (! selnose[32..32]), (! selnose[40..40]), (! selnose[48..48]));
	remainder[4..0] = StageIn[46..42];
	sel[] = ( gnd_wire, (sel[39..39] # DenominatorIn[46..46]), (sel[38..38] # DenominatorIn[45..45]), (sel[37..37] # DenominatorIn[44..44]), (sel[36..36] # DenominatorIn[43..43]), gnd_wire, (sel[34..34] # DenominatorIn[40..40]), (sel[33..33] # DenominatorIn[39..39]), (sel[32..32] # DenominatorIn[38..38]), (sel[31..31] # DenominatorIn[37..37]), gnd_wire, (sel[29..29] # DenominatorIn[34..34]), (sel[28..28] # DenominatorIn[33..33]), (sel[27..27] # DenominatorIn[32..32]), (sel[26..26] # DenominatorIn[31..31]), gnd_wire, (sel[24..24] # DenominatorIn[28..28]), (sel[23..23] # DenominatorIn[27..27]), (sel[22..22] # DenominatorIn[26..26]), (sel[21..21] # DenominatorIn[25..25]), gnd_wire, (sel[19..19] # DenominatorIn[22..22]), (sel[18..18] # DenominatorIn[21..21]), (sel[17..17] # DenominatorIn[20..20]), (sel[16..16] # DenominatorIn[19..19]), gnd_wire, (sel[14..14] # DenominatorIn[16..16]), (sel[13..13] # DenominatorIn[15..15]), (sel[12..12] # DenominatorIn[14..14]), (sel[11..11] # DenominatorIn[13..13]), gnd_wire, (sel[9..9] # DenominatorIn[10..10]), (sel[8..8] # DenominatorIn[9..9]), (sel[7..7] # DenominatorIn[8..8]), (sel[6..6] # DenominatorIn[7..7]), gnd_wire, (sel[4..4] # DenominatorIn[4..4]), (sel[3..3] # DenominatorIn[3..3]), (sel[2..2] # DenominatorIn[2..2]), (sel[1..1] # DenominatorIn[1..1]));
	selnose[] = ( (! nose[55..55]), (! nose[54..54]), ((! nose[53..53]) # sel[39..39]), ((! nose[52..52]) # sel[38..38]), ((! nose[51..51]) # sel[37..37]), ((! nose[50..50]) # sel[36..36]), ((! nose[49..49]) # sel[35..35]), (! nose[48..48]), (! nose[47..47]), ((! nose[46..46]) # sel[34..34]), ((! nose[45..45]) # sel[33..33]), ((! nose[44..44]) # sel[32..32]), ((! nose[43..43]) # sel[31..31]), ((! nose[42..42]) # sel[30..30]), (! nose[41..41]), (! nose[40..40]), ((! nose[39..39]) # sel[29..29]), ((! nose[38..38]) # sel[28..28]), ((! nose[37..37]) # sel[27..27]), ((! nose[36..36]) # sel[26..26]), ((! nose[35..35]) # sel[25..25]), (! nose[34..34]), (! nose[33..33]), ((! nose[32..32]) # sel[24..24]), ((! nose[31..31]) # sel[23..23]), ((! nose[30..30]) # sel[22..22]), ((! nose[29..29]) # sel[21..21]), ((! nose[28..28]) # sel[20..20]), (! nose[27..27]), (! nose[26..26]), ((! nose[25..25]) # sel[19..19]), ((! nose[24..24]) # sel[18..18]), ((! nose[23..23]) # sel[17..17]), ((! nose[22..22]) # sel[16..16]), ((! nose[21..21]) # sel[15..15]), (! nose[20..20]), (! nose[19..19]), ((! nose[18..18]) # sel[14..14]), ((! nose[17..17]) # sel[13..13]), ((! nose[16..16]) # sel[12..12]), ((! nose[15..15]) # sel[11..11]), ((! nose[14..14]) # sel[10..10]), (! nose[13..13]), (! nose[12..12]), ((! nose[11..11]) # sel[9..9]), ((! nose[10..10]) # sel[8..8]), ((! nose[9..9]) # sel[7..7]), ((! nose[8..8]) # sel[6..6]), ((! nose[7..7]) # sel[5..5]), (! nose[6..6]), (! nose[5..5]), ((! nose[4..4]) # sel[4..4]), ((! nose[3..3]) # sel[3..3]), ((! nose[2..2]) # sel[2..2]), ((! nose[1..1]) # sel[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[41..0], B"000000");
	StageOut[] = ( ((( StageIn[40..36], NumeratorIn[42..42]) & selnose[48..48]) # (prestg[41..36] & (! selnose[48..48]))), ((( StageIn[34..30], NumeratorIn[36..36]) & selnose[40..40]) # (prestg[35..30] & (! selnose[40..40]))), ((( StageIn[28..24], NumeratorIn[30..30]) & selnose[32..32]) # (prestg[29..24] & (! selnose[32..32]))), ((( StageIn[22..18], NumeratorIn[24..24]) & selnose[24..24]) # (prestg[23..18] & (! selnose[24..24]))), ((( StageIn[16..12], NumeratorIn[18..18]) & selnose[16..16]) # (prestg[17..12] & (! selnose[16..16]))), ((( StageIn[10..6], NumeratorIn[12..12]) & selnose[8..8]) # (prestg[11..6] & (! selnose[8..8]))), ((( StageIn[4..0], NumeratorIn[6..6]) & selnose[0..0]) # (prestg[5..0] & (! selnose[0..0]))));
END;
--VALID FILE
