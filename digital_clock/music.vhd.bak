-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 9.1 (Build Build 222 10/21/2009)
-- Created on Fri Jun 09 17:01:37 2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY music IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		CLK_32768 : IN STD_LOGIC;
		RST : IN STD_LOGIC;
		BEEP : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END music;


--  Architecture Body

ARCHITECTURE music_architecture OF music IS

	TYPE state_type is (do_m,re_m,mi_m,fa_m,sol_m,la_m,si_m,none);
	SIGNAL note : state_type; 
	SIGNAL counter : INTEGER RANGE 0 TO 80 := 0;   --counter是用来找音调的
	SIGNAL count : INTEGER RANGE 0 TO 20 := 0;         --count是整个歌曲的记拍器
	SIGNAL beep_reg: STD_LOGIC := '0';
	SIGNAL clk4hz : STD_LOGIC;

BEGIN
beep <= beep_reg;

beep_pro : process(CLK_32768)
	variable cnt : integer range 0 to 50 := 0;
begin 
	if (RISING_EDGE(CLK_32768)) then
		if (counter = 0) then
			beep_reg <= '0';
		elsif (cnt = counter) then
			cnt := 0 ; 
			beep_reg <= not beep_reg;
		else
			cnt := cnt + 1 ;
		end if;
	end if;
end process beep_pro;

clk4hz_pro :process(CLK_32768)                  --产生4hz的频率信号，在本程序中4hz（250ms）为1拍，是乐曲的节奏
variable cnt : integer range 0 to 4095 := 0;
begin
	if (RISING_EDGE(CLK_32768)) then
		if cnt = 4095 then
			cnt := 0 ; 
			clk4hz <= not clk4hz;
		else
			cnt := cnt + 1;
		end if;
	end if;
end process clk4hz_pro;

count_pro : process(clk4hz)                   --记拍器进程
begin
	if (RISING_EDGE(clk4hz)) then
		if count = 48 then
			count <= 0;
		else
			count <= count + 1;
		end if;
	end if;
end process count_pro;
     
note_pro : process(note)                     
begin
	case note is
		when do_m => counter <= 62;
		when re_m => counter <= 56;
		when mi_m => counter <= 50;
		when fa_m => counter <= 47;
		when sol_m => counter <= 42;
		when la_m => counter <= 37;
		when si_m => counter <= 33;
		when others => counter <= 0;
	end case;
end process note_pro;

music_pro : process(count)                    --乐谱
begin
	case count is
		when 0 => note <= none;
		when 1 => note <= do_m;
		when 2 => note <= do_m;
		when 3 => note <= sol_m ;
		when 4 => note <= sol_m ;
		when 5 => note <= la_m ;
		when 6 => note <= la_m ;
		when 7 => note <= sol_m ;
		when 8 => note <= none;
		when 9 => note <= fa_m ;
		when 10 => note <= fa_m;
		when 11 => note <= mi_m;
		when 12 => note <= mi_m ;
		when 13 => note <= re_m ;
		when 14 => note <= re_m ;
		when 15 => note <= do_m;
		when 16 => note <= none ;
--		when 17 => note <= sol_m ;
--		when 18 => note <= sol_m ;
--		when 19 => note <= fa_m ;		
--		when 20 => note <= fa_m ;
--		when 21 => note <= mi_m ;		
--		when 22 => note <= mi_m ;
--		when 23 => note <= re_m ;		
--		when 24 => note <= none ;
--		when 25 => note <= sol_m ;
--		when 26 => note <= sol_m ;
--		when 27 => note <= fa_m ;		
--		when 28 => note <= fa_m ;
--		when 29 => note <= mi_m ;		
--		when 30 => note <= mi_m ;
--		when 31 => note <= re_m ;
--		when 32 => note <= none ;
--		when 33 => note <= do_m ;
--		when 34 => note <= do_m;
--		when 35 => note <= sol_m;
--		when 36 => note <= sol_m;
--		when 37 => note <= la_m;
--		when 38 => note <= la_m;
--		when 39 => note <= sol_m;
--		when 40 => note <= none;
--		when 41 => note <= fa_m;
--		when 42 => note <= fa_m;
--		when 43 => note <= mi_m;
--		when 44 => note <= mi_m;
--		when 45 => note <= re_m;
--		when 46 => note <= re_m;
--		when 47 => note <= do_m;
--		when 48 => note <= none;
		when others => note <= none;
	end case;
end process music_pro;
END music_architecture;
